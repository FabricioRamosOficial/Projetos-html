document.addEventListener('DOMContentLoaded', () => {
    const playPauseBtn = document.getElementById('play-pause-btn');
    const resetBtn = document.getElementById('reset-btn');
    const langToggleBtn = document.getElementById('lang-toggle');
    const themeToggleBtn = document.getElementById('theme-toggle'); // NOVO: Bot√£o de tema

    const body = document.body;
    let presentationInterval;
    let currentSlide = 0;
    const sections = Array.from(document.querySelectorAll('.knowledge-section'));

    // --- L√≥gica de Modo Claro/Escuro ---
    // Fun√ß√£o para aplicar o tema salvo
    function applySavedTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'light-mode') {
            body.classList.add('light-mode');
            // Atualiza o texto do bot√£o para "Modo Escuro" quando o modo claro est√° ativo
            themeToggleBtn.innerHTML = themeToggleBtn.dataset.en === 'üåô Dark Mode' ? 'üåô Dark Mode' : 'üåô Modo Escuro';
        } else {
            // Garante que o modo escuro √© o padr√£o e o texto do bot√£o √© "Modo Claro"
            body.classList.remove('light-mode');
            themeToggleBtn.innerHTML = themeToggleBtn.dataset.pt === '‚òÄÔ∏è Modo Claro' ? '‚òÄÔ∏è Modo Claro' : '‚òÄÔ∏è Light Mode';
        }
    }

    // Fun√ß√£o para alternar o tema
    themeToggleBtn.addEventListener('click', () => {
        if (body.classList.contains('light-mode')) {
            body.classList.remove('light-mode');
            localStorage.setItem('theme', 'dark-mode'); // Salva a prefer√™ncia
            // Atualiza o texto para "Modo Claro"
            themeToggleBtn.innerHTML = themeToggleBtn.dataset.pt === '‚òÄÔ∏è Modo Claro' ? '‚òÄÔ∏è Modo Claro' : '‚òÄÔ∏è Light Mode';
        } else {
            body.classList.add('light-mode');
            localStorage.setItem('theme', 'light-mode'); // Salva a prefer√™ncia
            // Atualiza o texto para "Modo Escuro"
            themeToggleBtn.innerHTML = themeToggleBtn.dataset.en === 'üåô Dark Mode' ? 'üåô Dark Mode' : 'üåô Modo Escuro';
        }
    });

    // Aplica o tema salvo ao carregar a p√°gina
    applySavedTheme();

    // --- Restante do seu c√≥digo JavaScript (mantenha o que j√° existe) ---

    // L√≥gica para rolagem suave para uma se√ß√£o
    function scrollToSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.scrollIntoView({ behavior: 'smooth' });
        }
    }

    // L√≥gica para iniciar apresenta√ß√£o
    function startPresentation() {
        if (presentationInterval) {
            clearInterval(presentationInterval);
        }
        currentSlide = 0;
        scrollToSection(sections[currentSlide].id);

        presentationInterval = setInterval(() => {
            currentSlide++;
            if (currentSlide < sections.length) {
                scrollToSection(sections[currentSlide].id);
            } else {
                clearInterval(presentationInterval);
                playPauseBtn.textContent = playPauseBtn.dataset.pt === '‚ñ∂Ô∏è Iniciar Apresenta√ß√£o' ? '‚ñ∂Ô∏è Iniciar Apresenta√ß√£o' : '‚ñ∂Ô∏è Start Presentation';
            }
        }, 5000); // 5 segundos por slide
        playPauseBtn.textContent = playPauseBtn.dataset.pt === '‚è∏Ô∏è Pausar Apresenta√ß√£o' ? '‚è∏Ô∏è Pausar Apresenta√ß√£o' : '‚è∏Ô∏è Pause Presentation';
    }

    // L√≥gica para pausar/retomar apresenta√ß√£o
    playPauseBtn.addEventListener('click', () => {
        if (presentationInterval) {
            clearInterval(presentationInterval);
            presentationInterval = null;
            playPauseBtn.textContent = playPauseBtn.dataset.pt === '‚ñ∂Ô∏è Iniciar Apresenta√ß√£o' ? '‚ñ∂Ô∏è Iniciar Apresenta√ß√£o' : '‚ñ∂Ô∏è Start Presentation';
        } else {
            startPresentation();
        }
    });

    // L√≥gica para resetar apresenta√ß√£o
    resetBtn.addEventListener('click', () => {
        clearInterval(presentationInterval);
        presentationInterval = null;
        currentSlide = 0;
        scrollToSection('basics'); // Volta para a primeira se√ß√£o
        playPauseBtn.textContent = playPauseBtn.dataset.pt === '‚ñ∂Ô∏è Iniciar Apresenta√ß√£o' ? '‚ñ∂Ô∏è Iniciar Apresenta√ß√£o' : '‚ñ∂Ô∏è Start Presentation';
    });

    // --- L√≥gica de Idioma (manter ou ajustar conforme necess√°rio) ---
    const translations = {
        pt: {
            "Portf√≥lio de Conhecimentos Java": "Portf√≥lio de Conhecimentos Java",
            "Portf√≥lio de Conhecimentos": "Portf√≥lio de Conhecimentos",
            "‚ñ∂Ô∏è Iniciar Apresenta√ß√£o": "‚ñ∂Ô∏è Iniciar Apresenta√ß√£o",
            "‚è∏Ô∏è Pausar Apresenta√ß√£o": "‚è∏Ô∏è Pausar Apresenta√ß√£o",
            "üîÑ Resetar": "üîÑ Resetar",
            "Switch to English": "Switch to English",
            "‚òÄÔ∏è Modo Claro": "‚òÄÔ∏è Modo Claro", // Adicione aqui
            "üåô Modo Escuro": "üåô Modo Escuro", // Adicione aqui
            "Uma demonstra√ß√£o interativa de conhecimentos em Java. Use os controles no topo para iniciar uma apresenta√ß√£o autom√°tica ou explore manualmente.": "Uma demonstra√ß√£o interativa de conhecimentos em Java. Use os controles no topo para iniciar uma apresenta√ß√£o autom√°tica ou explore manualmente.",
            "Aprenda o B√°sico": "Aprenda o B√°sico",
            "Sintaxe B√°sica": "Sintaxe B√°sica",
            "A estrutura fundamental de um programa Java, incluindo a declara√ß√£o de classe e o m√©todo main.": "A estrutura fundamental de um programa Java, incluindo a declara√ß√£o de classe e o m√©todo main.",
            "üîó Ver Documenta√ß√£o": "üîó Ver Documenta√ß√£o",
            "Ver Exemplo": "Ver Exemplo",
            "Ciclo de Vida de um Programa": "Ciclo de Vida de um Programa",
            "Do c√≥digo-fonte (.java) √† compila√ß√£o (.class) e execu√ß√£o (JVM).": "Do c√≥digo-fonte (.java) √† compila√ß√£o (.class) e execu√ß√£o (JVM).",
            "Ver Explica√ß√£o": "Ver Explica√ß√£o",
            "Tipos de Dados": "Tipos de Dados",
            "Java possui tipos de dados primitivos (int, double, boolean) e tipos de refer√™ncia (String, Objetos).": "Java possui tipos de dados primitivos (int, double, boolean) e tipos de refer√™ncia (String, Objetos).",
            "Vari√°veis e Escopos": "Vari√°veis e Escopos",
            "Onde as vari√°veis s√£o acess√≠veis: escopo de classe (static), de inst√¢ncia e local (m√©todo).": "Onde as vari√°veis s√£o acess√≠veis: escopo de classe (static), de inst√¢ncia e local (m√©todo).",
            "Type Casting": "Type Casting",
            "Convers√£o de um tipo de dado para outro, seja impl√≠cita (widening) ou expl√≠cita (narrowing).": "Convers√£o de um tipo de dado para outro, seja impl√≠cita (widening) ou expl√≠cita (narrowing).",
            "Programa√ß√£o Orientada a Objetos": "Programa√ß√£o Orientada a Objetos",
            "B√°sicos de OOP": "B√°sicos de OOP",
            "OOP se baseia em quatro pilares: Encapsulamento, Heran√ßa, Polimorfismo e Abstra√ß√£o.": "OOP se baseia em quatro pilares: Encapsulamento, Heran√ßa, Polimorfismo e Abstra√ß√£o.",
            "Ver Conceitos": "Ver Conceitos",
            "Classes e Objetos": "Classes e Objetos",
            "Classes s√£o os 'moldes' e objetos s√£o as 'inst√¢ncias' criadas a partir desses moldes.": "Classes s√£o os 'moldes' e objetos s√£o as 'inst√¢ncias' criadas a partir desses moldes.",
            "Atributos e M√©todos": "Atributos e M√©todos",
            "Atributos (vari√°veis) definem o estado de um objeto, enquanto m√©todos (fun√ß√µes) definem seu comportamento.": "Atributos (vari√°veis) definem o estado de um objeto, enquanto m√©todos (fun√ß√µes) definem seu comportamento.",
            "Modificadores de Acesso": "Modificadores de Acesso",
            "Controlam a visibilidade de classes, atributos e m√©todos (public, private, protected, default).": "Controlam a visibilidade de classes, atributos e m√©todos (public, private, protected, default).",
            "Palavra-chave static": "Palavra-chave static",
            "Define membros que pertencem √† classe em si, n√£o a uma inst√¢ncia espec√≠fica.": "Define membros que pertencem √† classe em si, n√£o a uma inst√¢ncia espec√≠fica.",
            "Palavra-chave final": "Palavra-chave final",
            "Usada para criar constantes (vari√°veis), impedir a sobrescrita de m√©todos ou a heran√ßa de classes.": "Usada para criar constantes (vari√°veis), impedir a sobrescrita de m√©todos ou a heran√ßa de classes.",
            "Classes Aninhadas": "Classes Aninhadas",
            "Uma classe declarada dentro de outra. Pode ser est√°tica (Nested) ou n√£o-est√°tica (Inner).": "Uma classe declarada dentro de outra. Pode ser est√°tica (Nested) ou n√£o-est√°tica (Inner).",
            "Pacotes": "Pacotes",
            "Usados para agrupar classes relacionadas e evitar conflitos de nomes. Correspondem √† estrutura de diret√≥rios.": "Usados para agrupar classes relacionadas e evitar conflitos de nomes. Correspondem √† estrutura de diret√≥rios.",
            "Programa√ß√£o Funcional": "Programa√ß√£o Funcional",
            "Interfaces Funcionais": "Interfaces Funcionais",
            "Uma interface com apenas um m√©todo abstrato. √â o alvo para express√µes lambda e refer√™ncias de m√©todo.": "Uma interface com apenas um m√©todo abstrato. √â o alvo para express√µes lambda e refer√™ncias de m√©todo.",
            "Stream API": "Stream API",
            "Uma forma declarativa e funcional de processar cole√ß√µes de dados em sequ√™ncia.": "Uma forma declarativa e funcional de processar cole√ß√µes de dados em sequ√™ncia.",
            "Web Frameworks": "Web Frameworks",
            "Spring Boot": "Spring Boot",
            "Framework que simplifica a cria√ß√£o de aplica√ß√µes Spring aut√¥nomas e prontas para produ√ß√£o, com configura√ß√£o autom√°tica e servidor embutido.": "Framework que simplifica a cria√ß√£o de aplica√ß√µes Spring aut√¥nomas e prontas para produ√ß√£o, com configura√ß√£o autom√°tica e servidor embutido.",
            "T√≥picos Diversos": "T√≥picos Diversos",
            "Criptografia": "Criptografia",
            "Uso de APIs Java (JCA/JCE) para opera√ß√µes criptogr√°ficas como hashing e criptografia.": "Uso de APIs Java (JCA/JCE) para opera√ß√µes criptogr√°ficas como hashing e criptografia.",
            "Concorr√™ncia (Threads)": "Concorr√™ncia (Threads)",
            "Gerenciamento de m√∫ltiplas tarefas executando simultaneamente para melhorar o desempenho.": "Gerenciamento de m√∫ltiplas tarefas executando simultaneamente para melhorar o desempenho.",
            "Java NIO": "Java NIO",
            "API para opera√ß√µes de I/O de alta performance, utilizando buffers e canais para interagir com dados.": "API para opera√ß√µes de I/O de alta performance, utilizando buffers e canais para interagir com dados.",
            "&copy; 2024 Portf√≥lio de Conhecimentos Java. Desenvolvido por <a href='https://github.com/FabricioRamosOficial' target='_blank' rel='noopener noreferrer'>Fabricio Ramos Coelho</a>. Todos os direitos reservados.": "&copy; 2024 Portf√≥lio de Conhecimentos Java. Desenvolvido por <a href='https://github.com/FabricioRamosOficial' target='_blank' rel='noopener noreferrer'>Fabricio Ramos Coelho</a>. Todos os direitos reservados."
        },
        en: {
            "Portf√≥lio de Conhecimentos Java": "Java Knowledge Portfolio",
            "Portf√≥lio de Conhecimentos": "Knowledge Portfolio",
            "‚ñ∂Ô∏è Iniciar Apresenta√ß√£o": "‚ñ∂Ô∏è Start Presentation",
            "‚è∏Ô∏è Pausar Apresenta√ß√£o": "‚è∏Ô∏è Pause Presentation",
            "üîÑ Resetar": "üîÑ Reset",
            "Mudar para Portugu√™s": "Mudar para Portugu√™s",
            "‚òÄÔ∏è Modo Claro": "‚òÄÔ∏è Light Mode", // Adicione aqui
            "üåô Dark Mode": "üåô Dark Mode", // Adicione aqui
            "Uma demonstra√ß√£o interativa de conhecimentos em Java. Use os controles no topo para iniciar uma apresenta√ß√£o autom√°tica ou explore manualmente.": "An interactive demonstration of Java knowledge. Use the controls at the top to start an automatic presentation, or explore manually.",
            "Aprenda o B√°sico": "Learn the Basics",
            "Sintaxe B√°sica": "Basic Syntax",
            "A estrutura fundamental de um programa Java, incluindo a declara√ß√£o de classe e o main method.": "The fundamental structure of a Java program, including the class declaration and the main method.",
            "üîó View Docs": "üîó View Docs",
            "View Example": "View Example",
            "Lifecycle of a Program": "Lifecycle of a Program",
            "From source code (.java) to compilation (.class) and execution (JVM).": "From source code (.java) to compilation (.class) and execution (JVM).",
            "View Explanation": "View Explanation",
            "Data Types": "Data Types",
            "Java has primitive data types (int, double, boolean) and reference types (String, Objects).": "Java has primitive data types (int, double, boolean) and reference types (String, Objects).",
            "Variables and Scopes": "Variables and Scopes",
            "Where variables are accessible: class scope (static), instance scope, and local scope (method).": "Where variables are accessible: class scope (static), instance scope, and local scope (method).",
            "Type Casting": "Type Casting",
            "Converting one data type to another, either implicitly (widening) or explicitly (narrowing).": "Converting one data type to another, either implicitly (widening) or explicitly (narrowing).",
            "Object Oriented Programming": "Object Oriented Programming",
            "Basics of OOP": "Basics of OOP",
            "OOP is based on four pillars: Encapsulation, Inheritance, Polymorphism, and Abstraction.": "OOP is based on four pillars: Encapsulation, Inheritance, Polymorphism, and Abstraction.",
            "View Concepts": "View Concepts",
            "Classes and Objects": "Classes and Objects",
            "Classes are the 'blueprints' and objects are the 'instances' created from these blueprints.": "Classes are the 'blueprints' and objects are the 'instances' created from these blueprints.",
            "Attributes and Methods": "Attributes and Methods",
            "Attributes (variables) define the state of an object, while methods (functions) define its behavior.": "Attributes (variables) define the state of an object, while methods (functions) define its behavior.",
            "Access Specifiers": "Access Specifiers",
            "Control the visibility of classes, attributes, and methods (public, private, protected, default).": "Control the visibility of classes, attributes, and methods (public, private, protected, default).",
            "Static Keyword": "Static Keyword",
            "Defines members that belong to the class itself, not to a specific instance.": "Defines members that belong to the class itself, not to a specific instance.",
            "Final Keyword": "Final Keyword",
            "Used to create constants (variables), prevent method overriding, or prevent class inheritance.": "Used to create constants (variables), prevent method overriding, or prevent class inheritance.",
            "Nested Classes": "Nested Classes",
            "A class declared within another class. Can be static (Nested) or non-static (Inner).": "A class declared within another class. Can be static (Nested) or non-static (Inner).",
            "Packages": "Packages",
            "Used to group related classes and avoid naming conflicts. They correspond to the directory structure.": "Used to group related classes and avoid naming conflicts. They correspond to the directory structure.",
            "Functional Programming": "Functional Programming",
            "Functional Interfaces": "Functional Interfaces",
            "An interface with only one abstract method. It's the target for lambda expressions and method references.": "An interface with only one abstract method. It's the target for lambda expressions and method references.",
            "Stream API": "Stream API",
            "A declarative and functional way to process collections of data in a sequence.": "A declarative and functional way to process collections of data in a sequence.",
            "Web Frameworks": "Web Frameworks",
            "Spring Boot": "Spring Boot",
            "Framework that simplifies creating stand-alone, production-grade Spring applications with auto-configuration and an embedded server.": "Framework that simplifies creating stand-alone, production-grade Spring applications with auto-configuration and an embedded server.",
            "Miscellaneous Topics": "Miscellaneous Topics",
            "Cryptography": "Cryptography",
            "Using Java APIs (JCA/JCE) for cryptographic operations like hashing and encryption.": "Using Java APIs (JCA/JCE) for cryptographic operations like hashing and encryption.",
            "Concurrency (Threads)": "Concurrency (Threads)",
            "Managing multiple tasks running concurrently to improve performance.": "Managing multiple tasks running concurrently to improve performance.",
            "Java NIO": "Java NIO",
            "API for high-performance I/O operations, using buffers e canais para interagir com dados.": "API for high-performance I/O operations, using buffers and channels to interact with data.",
            "&copy; 2024 Java Knowledge Portfolio. Developed by <a href='https://github.com/FabricioRamosOficial' target='_blank' rel='noopener noreferrer'>Fabricio Ramos Coelho</a>. All rights reserved.": "&copy; 2024 Java Knowledge Portfolio. Developed by <a href='https://github.com/FabricioRamosOficial' target='_blank' rel='noopener noreferrer'>Fabricio Ramos Coelho</a>. All rights reserved."
        }
    };

    let currentLang = 'pt'; // Define a linguagem inicial como portugu√™s

    // Fun√ß√£o para aplicar as tradu√ß√µes
    function applyLanguage(lang) {
        document.querySelectorAll('[data-pt], [data-en]').forEach(element => {
            if (lang === 'pt' && element.dataset.pt) {
                element.innerHTML = translations.pt[element.dataset.pt] || element.dataset.pt;
                // Para bot√µes de controle que t√™m texto din√¢mico, como o theme-toggle
                if (element.id === 'theme-toggle') {
                    if (body.classList.contains('light-mode')) {
                        element.innerHTML = translations.pt['üåô Modo Escuro'];
                    } else {
                        element.innerHTML = translations.pt['‚òÄÔ∏è Modo Claro'];
                    }
                }
            } else if (lang === 'en' && element.dataset.en) {
                element.innerHTML = translations.en[element.dataset.en] || element.dataset.en;
                // Para bot√µes de controle que t√™m texto din√¢mico
                if (element.id === 'theme-toggle') {
                    if (body.classList.contains('light-mode')) {
                        element.innerHTML = translations.en['üåô Dark Mode'];
                    } else {
                        element.innerHTML = translations.en['‚òÄÔ∏è Light Mode'];
                    }
                }
            }
        });

        // Atualiza o texto do bot√£o de idioma
        if (lang === 'pt') {
            langToggleBtn.textContent = langToggleBtn.dataset.pt;
        } else {
            langToggleBtn.textContent = langToggleBtn.dataset.en;
        }
        currentLang = lang;
        localStorage.setItem('lang', lang); // Salva a prefer√™ncia de idioma
    }

    // Carregar idioma salvo
    const savedLang = localStorage.getItem('lang');
    if (savedLang) {
        applyLanguage(savedLang);
    } else {
        applyLanguage(currentLang);
    }

    // Alternar idioma
    langToggleBtn.addEventListener('click', () => {
        const newLang = currentLang === 'pt' ? 'en' : 'pt';
        applyLanguage(newLang);
    });
});